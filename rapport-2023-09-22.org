#+title: Carnet de bord, Université McGill
#+author: Charles-Édouard Lizotte
#+date:22/09/2023
#+LATEX_CLASS: org-report
#+CITE_EXPORT: natbib
#+LANGUAGE: fr
#+BIBLIOGRAPHY: master-bibliography.bib
#+OPTIONS: toc:nil title:nil


\mytitlepage
\tableofcontents\newpage

* TODO Téléchargement de Wavewatch III -- <2023-09-18 Mon>
DEADLINE: <2023-09-18 Mon>

** Télécharger et construire le modèle
Avant tout, un courriel m'avait été envoyé avec un lien pour télécharger le modèle à l'adresse https://polar.ncep.noaa.gov/waves/wavewatch/distribution/ en 2019.
Une fois téléchargée, on peut développer l'archive *tar* dans un nouveau dossier (ww3 dans notre cas),
#+begin_src bash
  mkdir ww3
  tar -xvf wwatch3.v5.16.tar.gz -C ww3
  cd ww3
#+end_src
On se retrouve avec une multitude de fichiers *tar* éparpillés au long du dossier /ww3/. 
Pour développer les multiples archives *tar* restantes, on utilise le script bash d'installation fournit par l'équipe de Wavewatch,
#+begin_src bash
  chmod +x install_ww3_tar 
  ./install_ww3_tar 
#+end_src
Tout au long de l'installation, quelques questions seront posées sur les compilateurs désirés. Personnellement, j'utilise les compilateurs /gcc/ et /gfortran/ par habitude.
Par la suite, on s'assure que tout est en ordre à l'aide du script /w3-setup/ cachée dans le dossier /ww3/bin/.
Le script /w3-setup/ crée l'environnement Wavewatch contenue dans le dossier courant sous le nom de /wwatch3.env/.
De plus, cette commande nous permet de choisir
1) le répertoire du dossier /ww3/ (/home/charlesedouard/Desktop/Travail/ww3/);
2) le fichier de compilation associé à notre compilateur (/ww3/bin/comp.gfortran/);
3) ainsi que les /switches/ nécessaires à la compilation du modèle (/ww3/bin/switch-lizotte/).
Dans mon cas, j'ai mes propres /switches/, c'est pourquoi -- dans la prochaine commande -- on cite /-s lizotte/ en référence au fichier /switch-lizotte/.
Plus d'informations là dessus à venir. 
On peut effectuer cette commande depuis le dossier /ww3/,
#+begin_src bash
  ./bin/w3_setup /home/charlesedouard/Desktop/Travail/ww3 -s lizotte -c gfortran
#+end_src

Comme on utilise NetCDF4, il est impératif de créer deux variables d'environnement, soient /WWATCH3-NETCDF/ et /NETCDF-CONFIG/, 
#+begin_src bash
  export WWATCH3_NETCDF=NC4
  export NETCDF_CONFIG=/usr/lib/x86_64-linux-gnu
#+end_src

\nb Pour trouver le répertoire de NetCDF4, on utilise *nc-config*, 
#+begin_src bash
  which nc-config
#+end_src

Il serait pertinent d'ajouter ces variables d'environnement à notre /.bashrc/ et d'ajouter ajouter /bin/ et /exe/ à notre /PATH/.
Donc, dans le fichier /.bashrc/, on ajoute
#+begin_src bash
  export WWATCH3_NETCDF=NC4
  export NETCDF_CONFIG=/usr/bin/nc-config
  PATH=$PATH:/home/charlesedouard/Desktop/Travail/ww3/bin
  PATH=$PATH:/home/charlesedouard/Desktop/Travail/ww3/exe
  export PATH
#+end_src
Là, nous serions rendus l'étape de la compilation du modèle.
La compilation s'effectue à l'aide de la commande /w3-make/, par contre il faut revenir sur les /switches/ du modèle.
J'ai mes propres /switches/ qui s'assurent que tout fonctionne bien en sortant de la boîte (/switch-lizotte/).
L'intérieur du fichier se lie comme suit
#+begin_src bash
  F90 NOGRB NOPA LRB4 NC4 TRKNC SHRD PR3 UQ FLX2 LN1 ST2 NL1 BT0 IC0 IS0
  REF1 DB0 TR0 BS0 XX0 WNT1 WNX0 CRT0 CRX0  O0 O1 O2
#+end_src
Pour vérifier si les /switches/ sont bonnes, on prend la commande /sort-switch <switches-file> -r/.
La commande /-h/ fonctionne pour avoir de l'aide,
#+begin_src bash
  sort_switch switch_lizotte -r
#+end_src
Finalement, on appliquer le script /w3-make/,
#+begin_src bash
  w3_make
#+end_src
La commande /w3-make/ s'applique aussi sur les sous-routines individuelles de Wavewatch,
#+begin_src bash
  w3_make ww3_grid ww3_shell <...>
#+end_src
Et tout devrait bien compiler!

** Débuggage NetCDF et OpenMPI
À ce point, il est possible que la compilation n'ait pas lieu car bien des librairies NetCDF ne sont toujours pas installées.
Si c'est le cas, on peut sudo-installer la commande *nc-config* à l'aide de la première commande et NetCDF-fortran à l'aide de la seconde, comme proposé dans une réponse produite sur [[https://stackoverflow.com/questions/73249935/how-to-install-netcdf-fortran-on-ubuntu][Stack Overlow]].
#+begin_src bash
  sudo apt install libnetcdf-dev
  sudo apt install libnetcdff-dev
#+end_src
Pour voir si tout est en ordre, on vérifie la command *nc-config* à l'aide des commandes
#+begin_src bash
  nc-config --version
  nc-config --all
#+end_src

Il se peut que la librairie contenant *mpifort* n'est toujours pas installée sur notre ordinateur.
Il existe beaucoup de moyen de l'installer, mais *cmake* fait des siennes en cherchant un ancient répertoire MPI qui n'existe plus.
La [[https://github.com/pytorch/pytorch/issues/33521][solution]] proposée par un utilisateur GitHub est donnée par
#+begin_src bash
  # sudo apt install openmpi-bin
  # sudo apt-get install mpich
  sudo apt-get install libopenmpi-dev
#+end_src


* DONE Faire fonctionner le modèle standard -- <2023-09-19 Tue>
DEADLINE: <2023-09-20 Wed>

#+NAME: fig:testww3
#+CAPTION: Output du vent sorti d'une rapide run de Wavewatch. Les axes sont bien ordonnés donc les input sont réglementaires.
#+ATTR_LATEX: :float wrap :width 0.35\textwidth :placement [15]{r}{0.45\textwidth}\vspace{-\baselineskip} \centering \hspace{0.5cm}
[[file:figures/tests/2023_09_20_east_wind_from_ww3.png]]


** Re-Construire la grille, la mapsta et les forçages -- <2023-09-19 Tue>
<<sec:standalone>>
Heureusement, j'avais sauvegardé beaucoup de matériel avant l'annihilation de Mingan, dont quelques fonctions Python qui construisent les champs, soient
+ /build-grids.py/;
+ /build-current.py/;
+ /build-wind.py/.
J'en ai aussi profité pour les remetter à jour avec NetCDF4.
Quelques problème d'orientation des variables et dimensions sont apparus.
Il semble que je gérais très mal ce problème lors de maîtrise, mais le code est maintenant béton.
Mentionnons que les NetCDF doivent impérativement avoir des coordonnées dans l'ordre
+ /time/ (temps) ;
+ /y/ (latitude) ;
+ /x/ (longitude).
et que cet ordre doit *aussi* se retrouver dans le vecteur à l'intérieur du NetCDF et/ou du *xarray.Dataset*.
Après ces efforts, le modèle semble bien rouler sans problème.
Ce mardi le modèle était finalement bien installé avec toutes les librairies nécessaires, aujourd'hui les fonctions produisant les forçages nécessaires au couplage sont créés.
Il ne reste donc qu'à vérifier si le modèle prend tout et après on peut se lancer dans le couplage.\bigskip

Ce mercredi midi, le modèle fonctionne à merveille.

* DONE Faire fonctionner le modèle en MPI -- <2023-09-21 Thu>
DEADLINE: <2023-09-21 Thu>

** Déterminer les bonnes switches pour la compilation MPI -- <2023-09-20 Wed>
Maintenant que le modèle /standalone/ fonctionne efficacement, on doit le lancer en MPI.
Il faudra d'abord changer les /switches/.
Essentiellement, les /switches/ permettent au script *w3 make* de prendre les fichiers /ftn/ et et des retirer des lignes de code inutiles.
Ce faisant, le script les transforment en fichiers compilable de type /.o/ (objets) et les met dans le dossier /ww3/obj/.
Par la suite, le script de compilation choisi (initialement /comp.gfortran/) transforme ces objets en exécutables qu'on peut retrouver dans le dossier /exe/.
Les /switches/ contrôlent donc tout, au final. \bigskip

Ainsi, lors de la compilation standard de Wavewatch 3 (voir section [[sec:standalone]]), nous avions actionné les /switches/ suivantes : 
#+begin_src
   F90 NOGRB NOPA LRB4 NC4 *SHRD* PR3 UQ FLX2 LN1 ST2 NL1 BT0 DB0 TR0 BS0 IC0 IS0 REF1 XX0 WNT1
   WNX0 CRT0 CRX0 TRKNC O0 O1 O2
#+end_src

Par contre, le [[https://polar.ncep.noaa.gov/waves/workshop/pdfs/WW3-workshop-exercises-day4-MPI.pdf][workshop de la NOAA]] disponible en ligne insiste modifier deux /switches/, soient *DIST* et *MPI* pour remplacer la /switch/ *SHRD*.
Notre fichier de /switches/ devrait donc ressembler à
#+begin_src
   F90 NOGRB NOPA LRB4 NC4 *DIST MPI* PR3 UQ FLX2 LN1 ST2 NL1 BT0 DB0 TR0 BS0 IC0 IS0 REF1 XX0
   WNT1 WNX0 CRT0 CRX0 TRKNC O0 O1 O2
#+end_src

** Compiler le modèle en MPI -- <2023-09-21 Thu>
Ensuite, il faut le compiler.
Normalement, pour utiliser MPI, on change *gfortran* par *mpif90* lors de la compilation.
Par contre, ça ne semble pas marcher du tout.
J'ai testé plusieurs types de compilations, tels que /mpifort/ et /mpif90/, ce qui a pris beaucoup de temps.
Après un peu de recherche, il semble que certaines sous-routines de Wavewatch 3 ne voulaient pas être compilées à cause d'une minuscule ligne d'appel MPI en Fortran.
Par exemple, les sous-routines
+ /w3iorsmd.ftn/;
+ /w3iosfmd.ftn/;
+ /w3waves.ftn/
posaient problème.
Mentionnons que la ligne problématique était
#+begin_src fortran
  INCLUDE "mpif.h"
#+end_src
et que la plupart des compilateurs /mpifort/ et /gfortran/ peuvent avoir de la misère avec ça.
On a donc du se tourner vers un autre compilateur, soit /ifort/. 


** Installer les compilateurs ifort et mpiifort -- <2023-09-21 Thu>

Avant tout, faire ça pour purger les détritus liés à une précédente suite Intel,
#+begin_src bash
  sudo apt autoremove intel-hpckit
  sudo apt update
#+end_src
Ensuite, on peut utiliser le [[https://fortran-lang.discourse.group/t/how-to-install-only-a-few-compiler-components-of-the-intel-oneapi-kits-on-ubuntu/3834/4][script d'un utilisateur d'un forum Fortran]] pour installer /ifort/, /icc/, /icpc/ et /mpi/,
#+begin_src bash
  sudo apt install \
       intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic \
       intel-oneapi-compiler-fortran \
       intel-oneapi-mpi-devel
#+end_src
Si ça marche pas au final, on peut faire ça, mais c'est 9Go, c'est la [[https://www.intel.com/content/www/us/en/docs/oneapi/installation-guide-linux/2023-0/apt.html#APT-PACKAGES][solution proposée par le site de Intel]]. 
En somme, ça installe toute la [[https://www.intel.com/content/www/us/en/developer/tools/oneapi/toolkits.html#gs.60r1wa][suite Intel HPC toolkit]], soit
#+begin_src bash
  sudo apt install intel-hpckit
#+end_src
Après, il faut ajouter /ifort/ et les autres options de compilation au /PATH/, comme proposé dans le [[https://www.intel.com/content/www/us/en/docs/fortran-compiler/get-started-guide/2022-2/get-started-on-linux.html][Getting Started on Linux]].
En fait, il serait préférable d'ajouter ça à notre /.bashrc/,
#+begin_src bash
  source /opt/intel/oneapi/setvars.sh
#+end_src
On retourne dans /ww3/bin/ et on tente de recompiler avec nos /switches/ MPI, donc
#+begin_src bash
  w3_setup /home/charlesedouard/Desktop/Travail/ww3 -c Intel -s mpilizotte
  ...
  w3_make ww3_shel
#+end_src
Et tout fonctionne! Le problème venait effectivement du compilateur.
Plusieurs utilisateurs mentionnaient que /mpif90/ a souvent des difficultés à jouer avec plusieurs versions de Fortran et de MPI.
Ça devait être ce qui faisait dérailler la compilation du modèle avec /gfortran/.
Par conséquent, nous ferons tout les compilations nécessaires à l'aide de /ifort/ et /mpiifort/ dès maintenant.

* DONE Codage et test du couplage MPI -- <2023-09-21 Thu>
DEADLINE: <2023-09-21 Thu>

** Reconstruire la fonction de couplage du modèle shallow water -- <2023-09-21 Thu>
Heureusement, la reconstruction des sous-routines de couplage ne m'a demandé que peu d'effort. 
Comme les frontières du modèle n'étaient plus périodique, il a été possible de retirer bien des sous-routines et variables superflues.
Entre autres,
1) il a fallu remettre à jour les quantiés MPI et les frontières /free slip/ et /no normal flow/.
2) et retirer tous les mécanismes de points fantômes qu'on utilisait précédement pour combler les lacunes du modèle périodique.
   Je suis assez heureux que ça soit parti, ça encombrait de beaucoup la sous-routine de couplage du modèle /shallow water/. 
La sous-routine de couplage est extrêmement plus propre et moins encombrée.
C'est un ménage du printemps réussi.


** Remettre à jour les sous-routines de Wavewatch III -- <2023-09-22 Fri>
Maintenant, il faut que les deux modèles se parlent, donc il faut
+ [X] Modifier la fonction de couplage du modèle /shallow water/l pour qu'il communique pleinement avec Wavewatch III;
+ [ ] Compiler Wavewatch avec les anciennes fonction modifiées lors de la maîtrise;
+ [ ] Remettre à jour le /ww3 shel/ pour que les dates soient bonnes;
+ [ ] Recréer un /launcher/.


* DONE Rencontre avec Louis-Philippe et David -- <2023-09-22 Fri>

** Création d'un « set-up » de référence du modèle « shallow water »
La rencontre a portée sur de nombreux points pertinents, mais avant tout il faudrait créer une expérience qui serait comparable dans tous les cas à /n/ couches.
Pour l'essentiel, on veut coupler le modèle Wavewatch avec un modèle /shallow water/ à /n/ couches, mais il faudrait que les modèles soient semblables pour pouvoir comparer l'effet des ondes sur chacun des /set-up/.
Ce /set-up/ de référence serait caractérisé par une fonction de courant barotrope (moyennée dans le temps) similaire pour tout nombre /n/ de couches.
Le but principal est de conserver l'énergie.
Il sera impératif de jouer avec la valeur du paramètre /r/ contrôlant le frottement au fond de la dernière couche.
Le paramètre /r/ se retrouve dans l'expression,
\begin{equation}
   \pdv{u}{t} = -r\pt u.
\end{equation}
Selon Louis-Philippe, la relation devrait être linéaire avec l'épaisseur de la dernière couche, mais ça reste à voir.\bigskip

Set up de référence avec Shallow water.
+ 2 à 10 couches : et il faudrait avoir la même fonction de courant barotrope moyennée dans le temps, pour conserver l'énergie.
  Comment ajuser le bottom drag? Ça devrait être linéaire selon LP. du/dt = -ru

** Retour sur la stratification
Pour ce qui est de la stratification, Louis-Philippe propose d'appliquer une exponentielle décroissante pour la densité avec un /decay scale/ ($\pt\chi$) de 1000 m. 
Bref une stratification qui aurait la forme,
\begin{align}
   && \rho(z) = \exp{z/\chi} && \text{où} && \chi = 1000\ [m]. &&
\end{align}


** Type de grille du modèle Wavewatch III
Cette semaine j'ai passé un peu de temps pour m'assurer que le modèle Wavewatch III est construit sur une grille Arakawa-A.
Lors de la rencontre, nous avons tous vérifié et n'avons pas vu rien qui contredisait cette affirmation.
L'indice principal qui me convainc en ce qui attrait à la grille de Wavewatch, ce sont les /output/.
En effet, les /output/ sont de type NetCDF et ils sont bien cordées sur une grille Arakawa-A avec les mêmes positions en /x/ et /y/.
Nous avons statué que c'était le cas et qu'il faudrait donc réaliser une interpolation linéaire ou une moyenne, ce qui a déjà été codé ce jeudi.

** Varia et compute Canada

En paralèlle, s'assurer que le modèle roule bien.

Louis-Philippe rappelle que lorsque tout sera en orde, on pourra envoyer le code à Compute Canada.
« Ça c'est mon sponsor 'kqu-192-02' » -- Louis-Philippe Nadeau.
