#+TITLE: Rapport hebdomadaire -- McGill
#+SUBTITLE: Semaine du 20 mars 2023
#+AUTHOR: Charles-Édouard Lizotte
#+DATE: 24/03/2023
#+LATEX_CLASS: org-report
#+CITE_EXPORT: natbib
#+LANGUAGE: fr
#+BIBLIOGRAPHY: master-bibliography.bib
#+OPTIONS: toc:nil title:nil

\mytitlepage
\tableofcontents\newpage

* DONE Transformer le /slab model/ en modèle /shallow water/ multicouches [3/3]
DEADLINE: <2023-03-23 Thu 19:00>
** *Cadre théorique* : Retrouver les variations des interfaces eta(k)
En premier lieu, en /shallow water/, l'équation de masse pour chaque couche $k$ est donnée par
\begin{equation}
\pdv{}{t} d_k = \divergence (d_k\vb{u}_k)
\hspace{0.5cm}\Longrightarrow\hspace{0.5cm}
\Delta d_k = \Delta t \ \qty[ \divergence (d_k \vb{u}_k)].
\end{equation}

Dans notre modèle /shallow water/, on calcule directement la ligne précédente à l'intérieur de la routine /rhs.f90/, ce qui nous donne la quantité /rhs-eta(i,j,k)/ (qui est en fait l'épaisseur).
Après avoir calculé les /RHS/, faut donc retouver les $\eta_k$ à l'aide des $d_k$.

#+NAME:  Modèle à 4 couches
#+CAPTION: Illustration d'un modèle \textit{shallow water} à quatre couches ($n_k = 4$).
\begin{wrapfigure}[12]{l}{0.35\textwidth}
\begin{center}
\begin{tikzpicture}
% Fond : 
\fill[blue!5] (0, 0) rectangle (4,-1);
\fill[blue!8] (0,-1) rectangle (4,-2);
\fill[blue!11] (0,-2) rectangle (4,-3);
\fill[blue!14] (0,-3) rectangle (4,-4);
% Lignes 
\draw [ultra thick] (0,0) node [anchor=east] {$\eta_1 = 0$} -- (4,0);
\draw [dotted] (0,-1) -- (4,-1);
\draw [dotted] (0,-2) -- (4,-2);
\draw [dotted] (0,-3) -- (4,-3);
\draw [ultra thick] (0,-4) node [anchor=east] {$\eta_B = 0$} -- (4,-4);
% courbes : 
\draw [ultra thin] (0,-1.2) node [anchor=east] {$\eta_2$} sin (1.2,-0.8) cos (2,-1) sin (2.8,-1.2) cos (4,-0.8);
\draw [ultra thin] (0,-2.2) node [anchor=east] {$\eta_3$} sin (1.2,-1.8) cos (2,-2) sin (2.8,-2.2) cos (4,-1.8);
\draw [ultra thin] (0,-3.2) node [anchor=east] {$\eta_4$} sin (1.2,-2.8) cos (2,-3) sin (2.8,-3.2) cos (4,-2.8);
% Textes : 
\draw (2,0) node [anchor=south] {Surface fixe} ;
\draw (2,-4) node [anchor=north] {Plancher océanique} ;
% H-k
\node at (4.3,-0.5) (H1) {$H_1$};
\node at (4.3,-1.5) (H2) {$H_2$};
\node at (4.3,-2.5) (H3) {$H_3$};
\node at (4.3,-3.5) (H4) {$H_4$};
% d-k
\node at (2,-0.5) (d1) {$d_1$};
\node at (2,-1.5) (d2) {$d_2$};
\node at (2,-2.5) (d3) {$d_3$};
\node at (2,-3.5) (d4) {$d_4$};
% flèches 
\draw[>=stealth, ->|] (H1) -- (4.3, 0); 
\draw[>=stealth, ->|] (H1) -- (4.3,-1);
\draw[>=stealth, -> ] (H2) -- (4.3,-1); 
\draw[>=stealth, ->|] (H2) -- (4.3,-2);
\draw[>=stealth, -> ] (H3) -- (4.3,-2); 
\draw[>=stealth, ->|] (H3) -- (4.3,-3);
\draw[>=stealth, -> ] (H4) -- (4.3,-3); 
\draw[>=stealth, ->|] (H4) -- (4.3,-4);
\end{tikzpicture}
\end{center}
\end{wrapfigure}

En commençant depuis la fin, l'algorithme pour retrouver les $\eta_k$ à partir des épaisseurs $d_k$ est donné par
\begin{align}
        & (k=4) \hspace{0.5cm} d_4 = H_4 - \eta_B + \eta_4 \hspace{0.5cm} \Longrightarrow \hspace{0.5cm} \eta_4 = \cancelto{0}{\eta_B} + (d_4 - H_4); \\
        & (k=3) \hspace{0.5cm} d_3 = H_3 - \eta_4 + \eta_3 \hspace{0.5cm} \Longrightarrow \hspace{0.5cm} \eta_3 =\eta_4+(d_3-H_3);\\
        & (k=2) \hspace{0.5cm} d_2 = H_2 - \eta_3 + \eta_2 \hspace{0.5cm} \Longrightarrow \hspace{0.5cm} \eta_2 =\eta_3+(d_2-H_2);\\
        & (k=1) \hspace{0.5cm} d_1 = H_1 - \eta_2 + \eta_1 \hspace{0.5cm} \Longrightarrow \hspace{0.5cm} \eta_1 =\eta_2+(d_1-H_1) = 0.
\end{align}

Pour résumé, de manière générale, entre les couches 2 et /nk-1/,
#+NAME: evolution-eta
\begin{equation}
\eta_k = \eta_{k+1} + (d_k - H_k).
\end{equation}
On peut donc toujours prendre la dernières couches et reconstruire les autres $\eta_{k+1}$.
Numériquement, il suffit d'enregistrer le champs scalaire $\eta_{k+1}$ et de l'appliquer à l'itération suivante de la couche.
Cette technique est employé par toutes les sous-routines qui font usage de la /thickness/ une fois les /RHS-eta/ trouvés.\\


Mentionnons qu'on regarde les /RHS/ des équations du mouvement, soit les dérivées temporelles des quantités $h$ et $\eta$.
En ordre décroissant, il est donc possible de créer une méthode itérative qui appelle le /RHS/ du /eta/ couche inférieure ($nk+1$) à l'aide de la dérivée de l'équation [[evolution-eta]], soit
\begin{align}
(k=nz)\hspace{2cm}    &\Delta \eta_{nz} =\ \Delta h_{nz}\ ;\nonumber\\
(k=k) \hspace{2cm} &\Delta \eta_{k}\ = \ \Delta h_k\ + \Delta \eta_{k+1}\ ;\\
(k=1) \hspace{2cm} &\Delta \eta_1\ = \ \Delta h_1\ + \Delta \eta_2. \nonumber 
\end{align}



*N.B.* Cette technique a ses limites, si l'on a beaucoup de couches on commence à accumuler de l'erreur numérique à chaque itération en /k/.
Pous solutionner ce problème, on utiliserait une méthode d'algèbre linéaire matricielle, mais ça ne devrait pas être très grave si on a peu de couches, selon David.

** *Cadre théorique* : Vorticité quasi-géostrophique
*** Retrouver la QGPV à partir de la vorticité relative

Dans le système en eau peu profonde, la vorticité potentielle $Q_k$ est une quantité conservée, de sorte que 

\begin{equation}
(SWPV) \hspace{1cm} \dv{Q}{t} = \dv{t} \qty(\frac{\zeta + f}{h}) = 0.       
\end{equation}

Pour retrouver la vorticité potentielle quasi-géostrophique en eau peu profonde (SWQGPV), on applique les trois approximations quasi-géostrophiques [cite:@vallis_2006, p184], soient
+ (1) Les variations de l'épaisseur /h/ sont minces; 
+ (2) Le nombre de Rossby est petit;
+ (3) Les variations du paramètre de Coriolis sont faibles 
Par conséquent, avec (1),
\begin{align}
Q_k = \frac{\zeta_k + f}{H_k+h_k'} 
= \frac{\zeta_k + f}{H_k}  \qty( \frac{1}{1 + h_k'/H_k})  
\approx \frac{\zeta_k + f}{H_k}  \qty(1 + \frac{h_k'}{H_k}).
\end{align}

Avec (2),
\begin{align}
Q_k \approx \frac{1}{H_k}  \qty(f + \zeta_k -f\frac{h_k'}{H_k}).
\end{align}

Avec (3), 
\begin{align}
Q_k \approx \frac{1}{H_k}  \qty(f + \zeta_k -f_o\frac{h_k'}{H_k}).
\end{align}

Cette nouvelle quantité $q_k$ s'appelle la *vorticité potentielle quasi-géostrophique* (QGPV) et est conservée sur le domaine.
Soit,
#+NAME: qgpvk
\begin{equation}
\boxed{q_k \equiv \qty( \beta  y + \zeta_k - f_o \frac{h_k'}{H_k})
\hspace{0.3cm} \text{où} \hspace{0.3cm}
\zeta_k = \laplacian \psi_k.}
\end{equation}

La variation de l'interface entre deux couches $\eta_k'$ peut toujours être exprimée par un ratio des fonctions de courant qui l'entourent ($\psi_{k}$ et $\psi_{k-1}$), de sorte que 
\begin{equation}
\psi_1 = \frac{g}{f_0} \eta_1; 
\hspace{1cm} \eta_k' = \frac{f_o}{g_k'} \qty(\psi_k - \psi_{k-1});
\hspace{1cm} \vb{u} = \kvf \times \gradient\psi.
\end{equation}

*** Généralisation de la QGPV à un modèle à plusieurs couches

Après quelque substitutions algébriques, on parviendra ainsi à une équation générique de la vorticité potentielle quasi-géostrophique en eau peu profonde pour un modèle à plusieurs couches,
\begin{align}
h_k' &= H_k + \eta_k' - \eta_{k+1}',\\
&= H_k + \frac{f_0}{g_k'} (\psi_k - \psi_{k-1}) - \frac{f_0}{g_{k+1}'} (\psi_{k+1} - \psi_k),
\end{align}

Conséquemment, si le terme $\qty(H_k/H_k)f_0^2 \rightarrow 0$, 
\begin{equation}
\boxed{q_k  = \beta y + \laplacian \psi_k + \frac{f_0^2}{H_k} \qty(\frac{\psi_{k-1}-\psi_k}{g_k'} -  \frac{\psi_k - \psi_{k+1}}{g_{k+1}'})
\hspace{0.7cm} \text{où} \hspace{0.7cm}
g_k' = g \frac{\rho_k - \rho_{k-1}}{\rho_1}.}
\end{equation}

*N.B. 1)* Notre résultat est différent de celui exprimé dans le [cite:@vallis_2006, p.185] à ce qui attrait aux gravités réduites car nous définissons $\eta_k$ comme la «plafond» d'une couche $k$ et non son «plancher».\\

*N.B. 2)* La formulation [[qgpvk]] est toujours valides, car c'est la définition de la QGPV à plusieurs couches.
Une version différente existe en milieu continu, mais nous y reviendrons dans les prochains rapports.
Bref, restons avec cette formulation, ça nous empêchera de se tromper avec les gravités réduites.

*** Gravité réduite

Pour donner un argument, toujours en se fiant au Vallis, notre formulation de la gravités réduites $g_i'$ découle du fait que la pression s'additionne à chaque couche, de sorte que 
\begin{equation}
p_{k} = \underbrace{\rho_1 g \eta_1\bigno}_{m=1,\ \rho_0=0} + \ \rho_1 \sum_{m=2}^k \underbrace{\qty(\frac{\rho_m - \rho_{m-1}}{\rho_1} g)}_{g_k'} \eta_m
\hspace{0.8cm} \text{où}\hspace{0.8cm}
\eta_{nz} = \eta_B = 0,
\end{equation}
lorsque $\eta_k$ est définit comme le «plafond» d'une couche $k$.
Pour une surface fixe, $\eta_1$ est tout simplement nulle et on rajoute un gradient de pression dans les équations du mouvement.

** DONE Modifer le schéma numérique pour retrouver les eta(k)
DEADLINE: <2023-03-23 Thu>
Il existe un peu une incertitude entre /eta/ et /thickness/, les deux variables s'interchangent lorsqu'on travaille à plus de deux couches et j'ai un peu de difficulté à comprendre ça.
Il va donc falloir déméler toute cette information-là.
En premier lieu, nous avons désormais un vecteur $H(k)$ qui décrit les épaisseurs moyennes de chaque couches (On l'avait déjà, mais on va vraiment s'en servir)
Nous n'avons pas vraiment de variable générique qui décrit l'épaisseur réelle, nous allons donc créer une variable générique pour l'épaisseur /d-k/, car /thickness/ est généralement calculée /on the spot/ dans chaque sous-routine.
Ensuite, en suivant le schéma décrit dans les sections précédentes, on va pouvoir retrouver les /eta-k/ à l'aide des /d-k/.\\

*N.B.* Finalement, après inspection du code, j'ai abandonnée l'idée d'avoir un /thickness/ prédéfinit à la grandeur du code, on va rester avec /eta-k/ et calculer /thickness/ /on the spot/. Faut juste changer le nom de la variable /RHS-eta/ qui définit plutôt /RHS-thickness/. 

** DONE Modifier les sous-routines de diagnostiques et d'/output/ [3/3] 
Toutes les routines de diagnostiques ont été créées pour 2 couches uniquement, il faudrait donc modifier les *do loop* qui contiennent des /k/ et /nz/.
Pour l'essentiel, il faut modifer les fichiers : 

- [X] /div-vort.f90/ : Les variables /zeta/ et /div/ pourraient être génériques au fil du code et contenir /nz/ couches. Avant, nous avions /div1/, /div2/, /zeta1/ et /zeta2/ avec la forme $(0:nnx,0:nny)$ quand on aurait pu seulement avoir $div(0:nnx,0:nny,nz)$ et $zeta(0:nnx,0:nny,nz)$. Mais j'ai plutôt décidé de modifier /div-vort.f90/ (la sous-routine qui calcule ces quantités). /div-vort.f90/ est devenu une routine locale qui calcule /zeta/ et /div/ /on the spot/ et j'ai supprimé les variables /zeta1/, etc. J'ai vérifié que ça fonctionnait dans tous les sous-routines où on appellait ces deux quantitiés : 
  - [X] /main.f90/ : Principalement changer la taille des variables et retirer les variables désuettes : 
  - [X] /initialize.f90/ : IDEM.
  - [X] /dump-spc.f90/ : Sous-routine éliminée car elle réalisait la même tâche que /dump-bin.f90/ et n'était pas appelée par aucune routine. 
  - [X] /div-vort.f90/ : Finalement, après cette inspection, on voit que la sous-routine /div-vort.f90/ ne sert pas à grand chose, car on calcule toujours /zeta/ et /div/ /on the spot/ pour un /k/ définit.
- [X] /diags.f90/ : 
  - [X] On a le même problème que dans le /main.f90/ parce qu'on retrouve la /thickness/ à l'aide des $\eta_K$ et c'est vraiment pas clair si la variable eta ici est une épaisseur ou une variation à partir de l'interface. EDIT : Après avoir re-vérifié , tout semble bon. De manière générale, on peut retrouver la /thickness/ parce que les diagnostiques sont produits après que le /RHS/ ait été appliqué sur /eta/.
  - [X] Aussi, il faudrait régler le problème des mode barotropes et baroclines (Mis en dépot car j'ai besoin d'aide pour ça, la matrice que LP m'a envoyée, c'est pas clair).
    En attendant, la /do loop/ des /nz/ s'arrête à nz = 2, de sorte que les quantités précédentes soient toujours calculées, sans rien briser.
- [X] /dump-bin.f90/; On utilisait précédemment les variables /zeta1/, /div1/, /zeta2/ et /div2/. C'est terminé, on appelle maintenant la sous-routine /div-vort.f90/ à l'intérieur d'un /k-loop/. La sous-routine /div-vort.f90/ a aussi été retirée du programme /main.f90/ à cause de sons changement de nature. Il a fallut modifier les variables /out/ aussi dans /initialize.f90/ et /main.f90/.

** DONE Gestion des paramètres initiaux
Faut gosser un peu dans la fonction /initialisation.f90/ pour avoir un H(k) et un gprime(k) qui fonctionnent.
Maintenant, gprime(k) est définit en fonction d'un vecteur rho(k). 
Tout va être relié dans le fichier de paramètres.

#+print_bibliography:
